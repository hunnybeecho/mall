{"ast":null,"code":"import axios from \"axios\";\n// import qs from 'qs';\n// import { message } from 'antd';\n\n// let domain = \"http://111.231.103.117:8083/\";\nlet domain = \"http://111.231.103.117:8083/\";\naxios.interceptors.request.use(config => {\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  return Promise.resolve(error.response);\n});\naxios.defaults.withCredentials = true;\nfunction checkStatus(response) {\n  // loading\n  // 如果http状态码正常，则直接返回数据\n  if (response && (response.status === 200 || response.status === 304 || response.status === 400)) {\n    return response.data;\n    // 如果不需要除了data之外的数据，可以直接 return response.data\n  }\n  // 异常状态下，把错误信息返回去\n  return {\n    status: -404,\n    msg: \"网络异常\"\n  };\n}\nfunction checkCode(res) {\n  // 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户\n  if (res.status === -404) {\n    // message.error('网络错误');\n    return;\n  }\n  if (res.status === 9999) {\n    // message.error('请重新登录');\n\n    return;\n  }\n  if (res.status === 10007) {\n    // message.error('请重新登录');\n    console.log(window.location);\n    // window.open(window.host+'/login');\n    // window.location.href = 'http://127.0.0.1/#/login';\n    window.location.href = \"http://111.231.103.117/#/login\";\n    return;\n  }\n\n  // console.log('location:',window.location);\n\n  if (res.status !== 10000) {\n    // message.error(res.msg);\n  }\n  return res;\n}\nexport default {\n  post(url, data, flag = 0) {\n    console.log('sessionStorage===', sessionStorage.getItem('token'));\n    if (flag === 0 && !sessionStorage.getItem('token')) {\n      window.location.href = 'http://111.231.103.117/#/login';\n      return;\n    }\n    return axios({\n      method: \"POST\",\n      baseURL: domain,\n      url,\n      // data: JSON.stringify(data),\n      data: JSON.stringify(data),\n      timeout: 10000,\n      headers: {\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        \"Content-Type\": \"application/json; charset=UTF-8\",\n        'jwt_token': sessionStorage.getItem('token') || null\n      },\n      withCredentials: true\n      // credentials: 'same-origin',\n    }, {\n      withCredentials: true\n    }).then(response => {\n      return checkStatus(response);\n    }).then(res => {\n      return checkCode(res);\n    });\n  },\n  get(url, params, flag = 0) {\n    console.log('sessionStorage===', sessionStorage.getItem('token'));\n    if (flag === 0 && !sessionStorage.getItem('token')) {\n      window.location.href = 'http://111.231.103.117/#/login';\n    }\n    return axios({\n      method: \"get\",\n      baseURL: domain,\n      url,\n      params,\n      // get 请求时带的参数\n      timeout: 10000,\n      headers: {\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        'jwt_token': sessionStorage.getItem('token') || null\n      },\n      withCredentials: true\n      // credentials: 'same-origin',\n    }, {\n      withCredentials: true\n    }).then(response => {\n      return checkStatus(response);\n    }).then(res => {\n      return checkCode(res);\n    });\n  }\n};","map":{"version":3,"names":["axios","domain","interceptors","request","use","config","error","Promise","reject","response","resolve","defaults","withCredentials","checkStatus","status","data","msg","checkCode","res","console","log","window","location","href","post","url","flag","sessionStorage","getItem","method","baseURL","JSON","stringify","timeout","headers","then","get","params"],"sources":["E:/源码/SpringBoot电商前端代码/vue3-mall-v2/src/pages/http2.js"],"sourcesContent":["import axios from \"axios\";\n// import qs from 'qs';\n// import { message } from 'antd';\n\n// let domain = \"http://111.231.103.117:8083/\";\nlet domain = \"http://111.231.103.117:8083/\";\n\naxios.interceptors.request.use(\n  (config) => {\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    return Promise.resolve(error.response);\n  }\n);\n\naxios.defaults.withCredentials = true;\n\nfunction checkStatus(response) {\n  // loading\n  // 如果http状态码正常，则直接返回数据\n  if (\n    response &&\n    (response.status === 200 ||\n      response.status === 304 ||\n      response.status === 400)\n  ) {\n    return response.data;\n    // 如果不需要除了data之外的数据，可以直接 return response.data\n  }\n  // 异常状态下，把错误信息返回去\n  return {\n    status: -404,\n    msg: \"网络异常\",\n  };\n}\n\nfunction checkCode(res) {\n  // 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户\n  if (res.status === -404) {\n    // message.error('网络错误');\n    return;\n  }\n  if (res.status === 9999) {\n    // message.error('请重新登录');\n\n    return;\n  }\n\n  if (res.status === 10007) {\n    // message.error('请重新登录');\n    console.log(window.location);\n    // window.open(window.host+'/login');\n    // window.location.href = 'http://127.0.0.1/#/login';\n    window.location.href = \"http://111.231.103.117/#/login\";\n    return;\n  }\n\n  // console.log('location:',window.location);\n\n  if (res.status !== 10000) {\n    // message.error(res.msg);\n  }\n  return res;\n}\n\nexport default {\n  post(url, data, flag = 0) {\n    console.log('sessionStorage===', sessionStorage.getItem('token'))\n    if (flag === 0 && !sessionStorage.getItem('token')) {\n      window.location.href = 'http://111.231.103.117/#/login';\n      return\n    }\n    return axios(\n      {\n        method: \"POST\",\n        baseURL: domain,\n        url,\n        // data: JSON.stringify(data),\n        data: JSON.stringify(data),\n        timeout: 10000,\n        headers: {\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          \"Content-Type\": \"application/json; charset=UTF-8\",\n          'jwt_token': sessionStorage.getItem('token') || null\n        },\n        withCredentials: true,\n        // credentials: 'same-origin',\n      },\n      { withCredentials: true }\n    )\n      .then((response) => {\n        return checkStatus(response);\n      })\n      .then((res) => {\n        return checkCode(res);\n      });\n  },\n  get(url, params, flag = 0) {\n    console.log('sessionStorage===', sessionStorage.getItem('token'))\n    if (flag === 0 && !sessionStorage.getItem('token')) {\n      window.location.href = 'http://111.231.103.117/#/login';\n    }\n    return axios(\n      {\n        method: \"get\",\n        baseURL: domain,\n        url,\n        params, // get 请求时带的参数\n        timeout: 10000,\n        headers: {\n          \"X-Requested-With\": \"XMLHttpRequest\",\n          'jwt_token': sessionStorage.getItem('token') || null\n        },\n        withCredentials: true,\n        // credentials: 'same-origin',\n      },\n      { withCredentials: true }\n    )\n      .then((response) => {\n        return checkStatus(response);\n      })\n      .then((res) => {\n        return checkCode(res);\n      });\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}